; func _start() : long
_ = call print(Start\n, 6)
_ = call arrTest()
_ = call arrTest()

; func arrTest() : long
_ = size Assign 16
<>T2 = size Multiply 8
<>T1 = call alloc(<>T2)
_ = arr Assign <>T1
_ = i Assign 0
Jump .T4
.T3:
<>T6 = PreIncrement i
.T4:
<>T7 = i ComparisonLessThan size
If !<>T7 Jump .T5
<>T8 = call arrIndex(arr, i)
_ = <>T8 ReferenceAssign 0
Jump .T3
.T5:
<>T9 = call arrIndex(arr, 0)
_ = <>T9 ReferenceAssign 2
<>T10 = call arrIndex(arr, 1)
_ = <>T10 ReferenceAssign 3
_ = call print(\nAll, 4)
_ = i Assign 0
Jump .T12
.T11:
<>T14 = PreIncrement i
.T12:
<>T15 = i ComparisonLessThan size
If !<>T15 Jump .T13
_ = call print(\n, 1)
<>T17 = call arrIndex(arr, i)
<>T16 = Dereference <>T17
_ = call printNum(<>T16)
Jump .T11
.T13:
_ = call free(arr)
Return 0

; func arrIndex(arr : ptr, index : long) : ptr
arr = param 0
index = param 1
<>T18 = arr Add 7
<>T19 = 8 Multiply index
_ = <>T18 Add <>T19

; func alloc(size : long) : ptr
size = param 0
<>T20 = call GetProcessHeap()
_ = heapHandle Assign <>T20
<>T21 = call HeapAlloc(heapHandle, 0, size)
Return <>T21

; func free(position : ptr) : bool
position = param 0
<>T22 = call GetProcessHeap()
_ = heapHandle Assign <>T22
<>T23 = call HeapFree(heapHandle, 0, position)
Return <>T23

; func printNum(num : long) : long
num = param 0
_ = call printNumAny(num, 10)

; func printNumAny(num : long, base : long) : long
num = param 0
base = param 1
<>T24 = num ComparisonLessThan 0
If <>T24 Jump .T25
Jump .T26
.T25:
_ = call print(-, 1)
<>T27 = Negation num
_ = call printNum(<>T27)
Return 
.T26:
<>T28 = num Remainder base
_ = digit Assign <>T28
<>T29 = num Divide base
_ = rest Assign <>T29
<>T30 = rest ComparisonGreaterThan 0
If <>T30 Jump .T31
Jump .T32
.T31:
_ = call printNumAny(rest, base)
.T32:
_ = call printDigit(digit)

; func printDigit(digit : long) : long
digit = param 0
_ = digits Assign 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
<>T34 = digit Multiply 2
<>T33 = digits Add <>T34
_ = call print(<>T33, 1)

; func print(ptr : ptr, len : long) : long
ptr = param 0
len = param 1
<>T36 = Negation 11
<>T35 = call GetStdHandle(<>T36)
_ = stdOut Assign <>T35
_ = numberOfCharsWritten Assign 0
<>T38 = Reference numberOfCharsWritten
<>T37 = call WriteConsoleW(stdOut, ptr, len, <>T38, 0)
Return <>T37
