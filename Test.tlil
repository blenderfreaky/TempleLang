; proc _start() : long
_ = Call print(Start\n, 6)
_ = Call arrTest()

; proc arrTest() : long
_ = size Assign 16
<>T1 = Call arrAlloc(size)
_ = arr Assign <>T1
_ = i Assign 0
Jump .T3
.T2:
<>T5 = PreIncrement i
.T3:
<>T6 = i ComparisonLessThan size
If !<>T6 Jump .T4
<>T7 = Call arrIndex(arr, i)
_ = <>T7 ReferenceAssign 0
Jump .T2
.T4:
<>T8 = Call arrIndex(arr, 0)
_ = <>T8 ReferenceAssign 2
<>T9 = Call arrIndex(arr, 1)
_ = <>T9 ReferenceAssign 3
_ = Call print(\nAll, 4)
_ = i Assign 0
Jump .T11
.T10:
<>T13 = PreIncrement i
.T11:
<>T14 = i ComparisonLessThan size
If !<>T14 Jump .T12
_ = Call print(\n, 1)
<>T16 = Call arrIndex(arr, i)
<>T15 = Dereference <>T16
_ = Call printNum(<>T15)
Jump .T10
.T12:
_ = Call free(arr)
Return 0

; proc arrAlloc(size : long) : ptr
size = param 0
<>T18 = size Multiply 8
<>T17 = Call alloc(<>T18)
Return <>T17

; proc arrIndex(arr : ptr, index : long) : ptr
arr = param 0
index = param 1
<>T20 = arr Add 7
<>T21 = 8 Multiply index
<>T19 = <>T20 Add <>T21
Return <>T19

; proc alloc(size : long) : ptr
size = param 0
<>T22 = Call GetProcessHeap()
_ = heapHandle Assign <>T22
<>T23 = Call HeapAlloc(heapHandle, 0, size)
Return <>T23

; proc free(position : ptr) : bool
position = param 0
<>T24 = Call GetProcessHeap()
_ = heapHandle Assign <>T24
<>T25 = Call HeapFree(heapHandle, 0, position)
Return <>T25

; proc printNum(num : long) : long
num = param 0
<>T26 = Call printNumAny(num, 10)
Return <>T26

; proc printNumAny(num : long, base : long) : long
num = param 0
base = param 1
<>T27 = num ComparisonLessThan 0
If <>T27 Jump .T28
Jump .T29
.T28:
_ = Call print(-, 1)
<>T30 = ArithmeticNegation num
_ = Call printNum(<>T30)
Return 
.T29:
<>T31 = num Remainder base
_ = digit Assign <>T31
<>T32 = num Divide base
_ = rest Assign <>T32
<>T33 = rest ComparisonGreaterThan 0
If <>T33 Jump .T34
Jump .T35
.T34:
_ = Call printNumAny(rest, base)
.T35:
_ = Call printDigit(digit)

; proc printDigit(digit : long) : long
digit = param 0
_ = digits Assign 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
<>T37 = digit Multiply 2
<>T36 = digits Add <>T37
_ = Call print(<>T36, 1)

; proc print(ptr : ptr, len : long) : long
ptr = param 0
len = param 1
<>T39 = ArithmeticNegation 11
<>T38 = Call GetStdHandle(<>T39)
_ = stdOut Assign <>T38
_ = numberOfCharsWritten Assign 0
<>T41 = Reference numberOfCharsWritten
<>T40 = Call WriteConsoleW(stdOut, ptr, len, <>T41, 0)
Return <>T40
